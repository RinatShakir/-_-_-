calls = 0   # создаем переменную calls, согласно требованию задачи.
def count_calls():  # создаем функцию подсчета звонков (calls).
    global calls # создаем глобальную переменную calls внутри функции (не на глобальном уровне)
    calls = calls + 1 # для перехода к следующему индексу значения переменной, т.е.к след.букве.

def string_info(string): # создаем функцию string_info для переменной string согласно требованию задачи для принятия строки и возвращения в кортеж длины строки, верхнего и нижнего регистра индексов этой строки.
    stroka = str(string) # внутри фнукции создаем переменную stroka со строковым значением
    result = (len(stroka), stroka.upper(), stroka.lower()) # определяем переменную result, определяющую длину переменной stroka,
    # также преобразующую буквы переменной stroka в верхний и нижний регистры.
    count_calls() # вызываем функцию caount_calls, созданную ранее.
    return result # используем фнукцию return для выхода из функции и возвращения значения из функции вызывающему коду.

def is_contains(string, list_to_search): # создаем функцию is_contains для принятие 2-х аргументов: строки и список, и для возвращения TRUE - если строка находится в списке и FALSE - если отсутствует.
    string = str(string).lower() # внутри функции определяем переменную со строковым значением и вызывающем нижний регистр.
    list_to_search = list(list_to_search) # определяем переменную list_to_search с функцией list для упорядочения элементов переменной.
    count_calls() # вызываем функцию caount_calls, созданную ранее.
    for i in range(len(list_to_search)): # создаем цикл для того чтобы пробежать по длине переменных в списке
        if str(list_to_search[i]).lower() == string: # внутри цикла создаем условие, что если значение строковой переменной, преобразованной в нижний регистр, из списка, равно переменной string
            result = True # то необходимо возвращать значение TRUE.
            break
        else:
            result = False # в других случаях возвращать FALSE
            continue # и необходимо продолжить цикл.
    return result # по окончанию цикла вернуть результат.

# вводим заданные параметры в задаче, для обработки и вывода на экран по итогам работы созданных функций.
print(string_info('Capybara'))
print(string_info('Armageddon'))
print(is_contains('Urban', ['ban', 'BaNaN', 'urBAN'])) # No matches
print(is_contains('cycle', ['recycling', 'cyclic'])) # Urban ~ urBAN

print(calls)